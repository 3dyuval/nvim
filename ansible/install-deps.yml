---
- name: Install Neovim Dependencies
  hosts: localhost
  connection: local
  gather_facts: yes

  vars:
    stylua_version: "v0.20.0"
    home_dir: "{{ ansible_env.HOME }}"
    nvim_config_dir: "{{ home_dir }}/.config/nvim"
    nvim_data_dir: "{{ home_dir }}/.local/share/nvim"
    local_bin_dir: "{{ home_dir }}/.local/bin"

  tasks:
    # Ensure directories exist
    - name: Ensure local directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ local_bin_dir }}"
        - "{{ nvim_data_dir }}"
        - "{{ home_dir }}/.local/share"

    # Git installation check
    - name: Check if git is installed
      command: which git
      register: git_check
      changed_when: false
      failed_when: false

    - name: Fail if git is not installed
      fail:
        msg: "Git is not installed. Please install git first."
      when: git_check.rc != 0

    # Neovim installation
    - name: Check if nvim is installed
      command: which nvim
      register: nvim_check
      changed_when: false
      failed_when: false

    - name: Install Neovim (macOS)
      homebrew:
        name: neovim
        state: present
      when: nvim_check.rc != 0 and ansible_os_family == "Darwin"

    - name: Install Neovim (Debian/Ubuntu)
      apt:
        name: neovim
        state: present
      become: yes
      when: nvim_check.rc != 0 and ansible_os_family == "Debian"

    # Clone nvim config if not exists
    - name: Check if nvim config exists
      stat:
        path: "{{ nvim_config_dir }}"
      register: nvim_config_stat

    - name: Clone nvim config from GitHub
      git:
        repo: https://github.com/3dyuval/nvim
        dest: "{{ nvim_config_dir }}"
        clone: yes
        update: no
      when: not nvim_config_stat.stat.exists

    # Rust/Cargo installation
    - name: Check if cargo is installed
      command: which cargo
      register: cargo_check
      changed_when: false
      failed_when: false

    - name: Install Rust via rustup (if not installed)
      when: cargo_check.rc != 0
      shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        creates: "{{ home_dir }}/.cargo/bin/cargo"

    - name: Add cargo to PATH for current playbook
      when: cargo_check.rc != 0
      set_fact:
        ansible_env: "{{ ansible_env | combine({'PATH': home_dir + '/.cargo/bin:' + ansible_env.PATH}) }}"

    # Platform-specific package installations
    - name: Install packages (macOS)
      when: ansible_os_family == "Darwin"
      homebrew:
        name:
          - git-filter-repo
          - ripgrep
        state: present
      ignore_errors: yes

    - name: Install packages (Debian/Ubuntu)
      when: ansible_os_family == "Debian"
      become: yes
      apt:
        name:
          - git-filter-repo
          - ripgrep
        state: present
        update_cache: yes
      ignore_errors: yes


    # StyLua installation
    - name: Determine StyLua download URL (macOS ARM64)
      when: ansible_os_family == "Darwin" and ansible_machine == "arm64"
      set_fact:
        stylua_url: "https://github.com/JohnnyMorganz/StyLua/releases/download/{{ stylua_version }}/stylua-macos-aarch64.zip"

    - name: Determine StyLua download URL (macOS x86_64)
      when: ansible_os_family == "Darwin" and ansible_machine == "x86_64"
      set_fact:
        stylua_url: "https://github.com/JohnnyMorganz/StyLua/releases/download/{{ stylua_version }}/stylua-macos-x86_64.zip"

    - name: Determine StyLua download URL (Linux x86_64)
      when: ansible_system == "Linux" and ansible_machine == "x86_64"
      set_fact:
        stylua_url: "https://github.com/JohnnyMorganz/StyLua/releases/download/{{ stylua_version }}/stylua-linux-x86_64.zip"

    - name: Determine StyLua download URL (Linux ARM64)
      when: ansible_system == "Linux" and ansible_machine == "aarch64"
      set_fact:
        stylua_url: "https://github.com/JohnnyMorganz/StyLua/releases/download/{{ stylua_version }}/stylua-linux-aarch64.zip"

    - name: Download StyLua
      get_url:
        url: "{{ stylua_url }}"
        dest: /tmp/stylua.zip
        mode: '0644'
      when: stylua_url is defined

    - name: Extract StyLua
      unarchive:
        src: /tmp/stylua.zip
        dest: /tmp
        remote_src: yes
      when: stylua_url is defined

    - name: Install StyLua binary
      copy:
        src: /tmp/stylua
        dest: "{{ local_bin_dir }}/stylua"
        mode: '0755'
        remote_src: yes
      when: stylua_url is defined

    - name: Clean up StyLua temp files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/stylua.zip
        - /tmp/stylua
      when: stylua_url is defined


    # fff.nvim Rust backend build
    - name: Check if fff.nvim plugin exists
      stat:
        path: "{{ nvim_data_dir }}/lazy/fff.nvim"
      register: fff_plugin

    - name: Build fff.nvim Rust backend
      when: fff_plugin.stat.exists
      shell: |
        cd "{{ nvim_data_dir }}/lazy/fff.nvim" && \
        export PATH="{{ home_dir }}/.cargo/bin:$PATH" && \
        cargo build --release
      args:
        creates: "{{ nvim_data_dir }}/lazy/fff.nvim/target/release/libfff_lib.{{ 'dylib' if ansible_os_family == 'Darwin' else 'so' }}"
      ignore_errors: yes

    # Smart-splits kittens installation
    - name: Check if smart-splits plugin exists
      stat:
        path: "{{ nvim_data_dir }}/lazy/smart-splits.nvim/kitty/install-kittens.bash"
      register: smart_splits_script

    - name: Install smart-splits kittens
      when: smart_splits_script.stat.exists
      shell: |
        bash "{{ nvim_data_dir }}/lazy/smart-splits.nvim/kitty/install-kittens.bash"
      ignore_errors: yes


    # NVC command symlink
    - name: Check if nvc script exists
      stat:
        path: "{{ nvim_config_dir }}/bin/nvc"
      register: nvc_script

    - name: Create nvc symlink
      when: nvc_script.stat.exists
      file:
        src: "{{ nvim_config_dir }}/bin/nvc"
        dest: "{{ local_bin_dir }}/nvc"
        state: link
        force: yes

    # Verification tasks
    - name: Verify installations
      command: "{{ item.cmd }}"
      register: verify_results
      changed_when: false
      failed_when: false
      loop:
        - { cmd: "which git", name: "git" }
        - { cmd: "which nvim", name: "neovim" }
        - { cmd: "which cargo", name: "cargo" }
        - { cmd: "{{ local_bin_dir }}/stylua --version", name: "stylua" }
        - { cmd: "which git-filter-repo", name: "git-filter-repo" }
        - { cmd: "which rg", name: "ripgrep" }
        - { cmd: "test -f {{ nvim_data_dir }}/lazy/fff.nvim/target/release/libfff_lib.{{ 'dylib' if ansible_os_family == 'Darwin' else 'so' }} && echo 'exists'", name: "fff.nvim backend" }
        - { cmd: "test -L {{ local_bin_dir }}/nvc && echo 'exists'", name: "nvc symlink" }

    - name: Display installation summary
      debug:
        msg: |
          Installation Summary:
          =====================
          ✅ git: {{ 'Installed' if verify_results.results[0].rc == 0 else 'Not found' }}
          ✅ neovim: {{ 'Installed' if verify_results.results[1].rc == 0 else 'Not found' }}
          ✅ cargo: {{ 'Installed' if verify_results.results[2].rc == 0 else 'Not found' }}
          ✅ stylua: {{ 'Installed' if verify_results.results[3].rc == 0 else 'Not found' }}
          ✅ git-filter-repo: {{ 'Installed' if verify_results.results[4].rc == 0 else 'Not found (optional)' }}
          ✅ ripgrep: {{ 'Installed' if verify_results.results[5].rc == 0 else 'Not found' }}
          ✅ fff.nvim backend: {{ 'Built' if verify_results.results[6].stdout == 'exists' else 'Not built (will build on first use)' }}
          ✅ nvc command: {{ 'Available' if verify_results.results[7].stdout == 'exists' else 'Not found' }}

          Note: Restart Neovim to use the new dependencies.
          Make sure {{ local_bin_dir }} is in your PATH.